#!/usr/bin/env python

import subprocess
import configparser
import argparse
import threading
import os.path
import datetime
from dateutil import relativedelta
import os
import sys

times = []
resume = None
attrs = ['years', 'months', 'days', 'hours', 'minutes', 'seconds', 'microseconds']
human_readable = lambda delta: ['%d %s' % (getattr(delta, attr), getattr(delta, attr) > 1 and attr or attr[:-1]) for attr in attrs if getattr(delta, attr)]

ZMQ_ENABLED = True
try:
    import zmq
except ImportError:
    ZMQ_ENABLED = False
    pass

CONFIGURATION_FILENAME = 'config.ini'
ZMQ_ADDRESS = 'ipc:///tmp/flute'

def tic():
    global times
    times.append(datetime.datetime.now())

def toc(task_name=None):
    elapsed = relativedelta.relativedelta(datetime.datetime.now(), times.pop())
    if task_name is None:
        print >>sys.stderr, 'Time elapsed:', ' and '.join(human_readable(elapsed))
    else:
        print >>sys.stderr, 'Time elapsed for ' + task_name + ':', ' and '.join(human_readable(elapsed))

def wait_for_user():
    global resume
    print "Some error occurred. Waiting for user action from Flute console..."
    resume = False
    while not resume:
        pass
    print "Resuming"

def listener():
    global parser
    global tasks
    global resume
    context = zmq.Context.instance()
    socket = context.socket(zmq.REP)
    socket.bind(ZMQ_ADDRESS)
    while True:
        command = socket.recv()
        socket.send("OK") # Always return OK so we can still listen
        if command == 'reload':
            parser = parse_pipeline_configs()
        elif command.startswith('inject'):
            _, task = command.split()
            tasks.insert(0, task)
        elif command == 'skip':
            tasks.pop(0)
        elif command == 'end':
            tasks = []
        elif command == 'resume':
            resume = True
            

def list_sections(parser, sections):
    # Tasks
    tasks = [section[section.find(' ') + 1:] for section in sections if section.startswith('task')]
    pipelines = [section[section.find(' ') + 1:] for section in sections if section.startswith('pipeline')]
    others = [section for section in sections if not section.startswith('task') and not section.startswith('pipeline')]
    print 'Tasks: '
    for task in tasks:
        print '\t' + task

    print 'Pipelines: '
    for pipeline in pipelines:
        print '\t' + pipeline + ': ' + parser.get('pipeline ' + pipeline, 'tasks')

    print 'Other configurations: '
    for other in others:
        print '\t' + other

def parse_pipeline_configs():
    parser = configparser.ConfigParser()
    parser._interpolation = configparser.ExtendedInterpolation()
    parser.optionxform = str # To keep it case sensitive
    if not os.path.isfile(CONFIGURATION_FILENAME):
        raise Exception('Error: No configuration found')
    parser.read(CONFIGURATION_FILENAME)
    return parser

if __name__ == '__main__':
    # Parse arguments
    arg_parser = argparse.ArgumentParser()
    arg_parser.add_argument('-l', '--list', default=False, help='List tasks and pipelines', action='store_true')
    arg_parser.add_argument('-d', '--disablezmq', default=False, help='Disables dynamic manipulation of the pipeline', action='store_true')
    arg_parser.add_argument('-c', '--console', default=False, help='Provides a console that connects to the pipeline (requires ZMQ)', action='store_true')
    arg_parser.add_argument('pipeline_name', nargs='?', help='Name of pipeline or task to run')
    args = arg_parser.parse_args()

    parser = parse_pipeline_configs()
    sections = parser.sections()

    if args.list == True:
        list_sections(parser, sections)
        exit(0)

    
    ################### If console mode
    if args.console and ZMQ_ENABLED:
        context = zmq.Context.instance()
        socket = context.socket(zmq.REQ)
        socket.connect(ZMQ_ADDRESS)
        while True:
            command = raw_input('> ')
            if command == "q" or command == "quit":
                socket.disconnect(ZMQ_ADDRESS)
                exit()
            else:
                socket.send(command)
                socket.recv()
    ###################
    
    pipeline_name = args.pipeline_name

    # Set configurations as environment variables
    if 'config' in parser.sections():
        for config in parser.items('config'):
            os.environ[config[0]] = config[1]

    # Get list of tasks
    try:
        tasks = parser.get('pipeline ' + pipeline_name, 'tasks').split()
    except configparser.NoSectionError as er:
        # If the pipeline doesn't exist run the task that matches the name
        tasks = sys.argv[1].split() 

    # If dynamic manipulation is enabled, run the listener thread
    if not args.disablezmq and ZMQ_ENABLED:
        listener_thread = threading.Thread(target=listener)
        listener_thread.setDaemon(True)
        listener_thread.start()

    task_output = ''

    tic()
    while len(tasks) > 0:
        task = tasks.pop(0)
        task_key = 'task ' + task

        try:
            inputs = parser.get(task_key, 'input')
        except:
            print 'Error: Task {} does not exist'.format(task)
            sys.exit(0)

        if inputs == 'STDIN':
            inputs = task_output.split()
            inputs = ' '.join(inputs)

        command = parser.get(task_key, 'file')
        print 'Running {}...'.format(command)

        tic()

        if parser.has_option(task_key, 'parallel') and parser.get(task_key, 'parallel') == 'true':
            inputs = inputs.split()
            commands = []
            for input in inputs:
                commands.append(command + ' ' + input)

            processes = []
            for command in commands:
                process = subprocess.Popen(command, shell=True)
                processes.append(process)

            for process in processes:
                output, err = process.communicate()
                if (err):
                    wait_for_user();
                if type(output) is str:
                    task_output += output + '\n'
        
        elif parser.has_option(task_key, 'serial') and parser.get(task_key, 'serial') == 'true':
            inputs = inputs.split()
            commands = []
            for input in inputs:
                commands.append(command + ' ' + input)

            for command in commands:
                try:
                    task_output += subprocess.check_output(command, shell=True) + '\n'
                except subprocess.CalledProcessError as e:
                    wait_for_user()

        else:
            command += ' ' + inputs
            try:
                task_output = subprocess.check_output(command, shell=True)
            except subprocess.CalledProcessError as e:
                wait_for_user()

        toc(task_key)
        print 'Task {} finished\n'.format(parser.get(task_key, 'file'))

    print task_output 
    toc("pipeline " + pipeline_name)
    

